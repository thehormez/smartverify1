<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Hormez — ماسح باركود احترافي</title>
  <style>
    :root{--bg:#0b1020;--ink:#e5e7eb;--muted:#94a3b8;--line:#334155;--ok:#22c55e;--bad:#ef4444;--warn:#f59e0b}
    html,body{height:100%}
    body{margin:0;background:linear-gradient(180deg,#0b1020,#0a0f1d);color:var(--ink);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Helvetica,Arial}
    .container{max-width:1024px;margin:0 auto;padding:16px}
    .row{display:flex;gap:10px;flex-wrap:wrap;align-items:center}
    .card{background:rgba(255,255,255,.05);border:1px solid rgba(255,255,255,.08);border-radius:14px;padding:14px}
    .logo{width:40px;height:40px;border-radius:10px;background:#111;border:1px solid #333;display:grid;place-items:center}
    .logo span{font-weight:900;color:#ffd700}
    .btn{appearance:none;border:1px solid var(--line);background:#0b1220;color:var(--ink);border-radius:10px;padding:10px 14px;cursor:pointer}
    .btn:disabled{opacity:.5;cursor:not-allowed}
    .btn:hover{background:#0d1528}
    .select,.input{width:100%;padding:10px;border-radius:10px;border:1px solid var(--line);background:#0b1220;color:var(--ink)}
    #video{width:100%;aspect-ratio:3/4;background:#000;border-radius:12px}
    .grid{display:grid;gap:12px}
    @media(min-width:900px){.grid-2{grid-template-columns:2fr 1fr}}
    .muted{color:var(--muted)}
    .dot{width:10px;height:10px;border-radius:50%}
    .status{display:flex;gap:8px;align-items:center}
    .history{max-height:260px;overflow:auto}
    .tag{display:inline-flex;align-items:center;gap:6px;padding:6px 10px;border-radius:999px;border:1px solid var(--line);background:#0b1220}
    .ok{color:#86efac} .err{color:#fca5a5}
    .toast{position:fixed;left:0;right:0;top:12px;display:flex;justify-content:center;pointer-events:none;z-index:50}
    .toast > div{pointer-events:auto}
  </style>
</head>
<body>
  <div class="container">
    <div class="row" style="margin-bottom:8px">
      <div class="logo"><span>HS</span></div>
      <div style="font-weight:800;margin-inline-start:10px">ماسح الباركود الاحترافي</div>
      <div style="margin-inline-start:auto" class="row">
        <button id="langBtn" class="btn">AR</button>
      </div>
    </div>

    <div id="httpsWarn" class="card" style="display:none; border-color:#7f1d1d;background:#450a0a;color:#fecaca">
      ⚠️ الكاميرا تتطلب HTTPS أو localhost.
    </div>

    <div class="grid grid-2">
      <!-- Scanner panel -->
      <div class="card">
        <div class="row" style="justify-content:space-between; gap:8px">
          <div class="status"><div id="statusDot" class="dot" style="background:#9ca3af"></div><div id="statusText" class="muted">جاهز</div></div>
          <div class="row">
            <button id="startBtn" class="btn">▶️ تشغيل</button>
            <button id="stopBtn" class="btn" disabled>⏹️ إيقاف</button>
            <button id="switchBtn" class="btn">🔄 تبديل</button>
            <button id="torchBtn" class="btn">💡 فلاش</button>
          </div>
        </div>
        <video id="video" playsinline muted autoplay></video>
        <div class="row" style="margin-top:10px">
          <div style="flex:1">
            <div class="muted" id="lblEvent">الحدث</div>
            <input id="eventName" class="input" placeholder="اكتب اسم الحدث" />
          </div>
          <div style="flex:1">
            <div class="muted" id="lblCam">الكاميرا</div>
            <select id="cameraSelect" class="select"></select>
          </div>
        </div>
        <div class="row" style="margin-top:10px">
          <div style="flex:1">
            <div class="muted" id="lblManual">إدخال يدوي</div>
            <div class="row">
              <input id="manualCode" class="input" placeholder="SA_001" style="flex:1" />
              <button id="manualBtn" class="btn">تحقق</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Right panel -->
      <div class="card">
        <div class="row" style="align-items:center; margin-bottom:8px">
          <span class="muted">آخر النتائج</span>
          <div style="margin-inline-start:auto" class="row">
            <span id="eventTag" class="tag">Event: <b id="eventTagText">—</b></span>
            <button id="clearHist" class="btn">مسح السجل</button>
          </div>
        </div>
        <div id="lastBox" class="card" style="background:#0b1220; border-color:var(--line); margin-bottom:10px">
          <div class="muted" style="font-size:12px">النتيجة الأخيرة</div>
          <div id="lastResult" style="font-size:22px;font-weight:800;margin-top:6px">—</div>
          <div id="lastSub" class="muted" style="font-size:12px;margin-top:4px">—</div>
        </div>
        <div class="muted" style="font-size:12px">السجل (محفوظ بعد التحديث)</div>
        <div id="history" class="history"></div>
      </div>
    </div>
  </div>

  <div class="toast" id="toast" style="display:none"><div class="tag" id="toastInner">—</div></div>
  <audio id="beep" preload="auto"><source src="data:audio/mp3;base64,//uQZAAAAAAAAAAAAAAAAAAAA..." type="audio/mpeg"></audio>

  <!-- ZXing fallback loaders + native detector flag -->
  <script>
    (function(){
      const CANDS=[
        'https://unpkg.com/@zxing/browser@0.1.3/umd/index.min.js',
        'https://cdn.jsdelivr.net/npm/@zxing/browser@0.1.3/umd/index.min.js',
        'https://unpkg.com/@zxing/library@0.18.6/umd/index.min.js',
        'https://cdn.jsdelivr.net/npm/@zxing/library@0.18.6/umd/index.min.js'
      ];
      function load(src){return new Promise((res,rej)=>{const s=document.createElement('script');s.src=src;s.async=true;s.onload=()=>res();s.onerror=rej;document.head.appendChild(s);});}
      window.ensureZXing=async()=>{if(window.ZXing&&(window.ZXing.BrowserMultiFormatReader||window.ZXing.BrowserQRCodeReader))return true;for(const u of CANDS){try{await load(u);if(window.ZXing&&(window.ZXing.BrowserMultiFormatReader||window.ZXing.BrowserQRCodeReader))return true;}catch(_){} }return !!(window.ZXing&&(window.ZXing.BrowserMultiFormatReader||window.ZXing.BrowserQRCodeReader))};
      window.hasNativeDetector = 'BarcodeDetector' in window;
    })();
  </script>

  <!-- Firebase compat -->
  <script src="https://www.gstatic.com/firebasejs/10.12.4/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.12.4/firebase-firestore-compat.js"></script>

  <script>
  (function(){
    const $=(s,root=document)=>root.querySelector(s);
    const T={
      ar:{ready:'جاهز',start:'▶️ تشغيل',stop:'⏹️ إيقاف',switch:'🔄 تبديل',flash:'💡 فلاش',event:'الحدث',camera:'الكاميرا',manual:'إدخال يدوي',checking:'جاري التحقق…',ok:'✅ مقبول',dupe:'⚠️ تم استخدامه سابقًا',notfound:'❌ الكود غير موجود',mismatch:'❌ هذا الكود لا يخص هذا الحدث',saved:'تم الحفظ',needHttps:'⚠️ يجب HTTPS للكاميرا',scanPaused:'⏸️ إيقاف مؤقت بعد القراءة',lang:'EN',camlib:'مكتبة الكاميرا لم تُحمّل'},
      en:{ready:'Ready',start:'▶️ Start',stop:'⏹️ Stop',switch:'🔄 Switch',flash:'💡 Torch',event:'Event',camera:'Camera',manual:'Manual input',checking:'Checking…',ok:'✅ Accepted',dupe:'⚠️ Already used',notfound:'❌ Code not found',mismatch:'❌ Code does not belong to this event',saved:'Saved',needHttps:'⚠️ Camera requires HTTPS',scanPaused:'⏸️ Paused after read',lang:'AR',camlib:'Camera library not loaded'}
    };
    let LANG=localStorage.getItem('hs:scan:lang')||'ar';
    function setLang(l){LANG=l;localStorage.setItem('hs:scan:lang',l);document.documentElement.lang=l;document.documentElement.dir=(l==='ar')?'rtl':'ltr';$('#langBtn').textContent=T[l].lang;$('#lblEvent').textContent=T[l].event;$('#lblCam').textContent=T[l].camera;$('#lblManual').textContent=T[l].manual;$('#startBtn').textContent=T[l].start;$('#stopBtn').textContent=T[l].stop;$('#switchBtn').textContent=T[l].switch;$('#torchBtn').textContent=T[l].flash;}

    // HTTPS guard
    function checkHttps(){const isLocal=location.hostname==='localhost'||location.hostname==='127.0.0.1';const ok=location.protocol==='https:'||isLocal;$('#httpsWarn').style.display= ok? 'none':'block';$('#startBtn').disabled = !ok;return ok;}

    // Firebase
    const cfg={ apiKey:"AIzaSyBt7eV0k_yTcOgiU8rx5UbvkkeBHduR6ac", authDomain:"hormez-inv.firebaseapp.com", projectId:"hormez-inv" };
    if(!firebase.apps.length){firebase.initializeApp(cfg);} const db=firebase.firestore(); const Field=firebase.firestore.FieldValue;

    // URL event
    function setEventFromQuery(){const p=new URLSearchParams(location.search);const ev=p.get('event');if(ev){$('#eventName').value=ev;}}
    function getEvent(){return $('#eventName').value.trim();}
    function reflectEventTag(){ $('#eventTagText').textContent=getEvent()||'—'; }

    // History per event
    function histKey(){const ev=getEvent();return `hs:scan:hist:${ev||'__ALL__'}`}
    function getHist(){try{return JSON.parse(localStorage.getItem(histKey())||'[]')}catch{return[]} }
    function pushHist(entry){const h=getHist();h.unshift(entry);localStorage.setItem(histKey(),JSON.stringify(h.slice(0,80)));renderHist();}
    function renderHist(){ const box=$('#history'); const h=getHist(); box.innerHTML=''; h.forEach(x=>{ const d=document.createElement('div'); d.style.padding='8px'; d.style.borderTop='1px solid var(--line)'; d.innerHTML=`<div style="font-family:ui-monospace">${x.code}</div><div class="muted" style="font-size:12px">${new Date(x.at).toLocaleString(LANG==='ar'?'ar-EG':'en-GB')} — ${x.msg}</div>`; box.appendChild(d); }); }

    // Toast
    function toast(msg){const t=$('#toast');const inner=$('#toastInner');inner.textContent=msg;t.style.display='flex';setTimeout(()=>t.style.display='none',1800);} 

    // Beep+vibrate
    function feedback(success=true){ try{ $('#beep').currentTime=0; $('#beep').play().catch(()=>{}); navigator.vibrate?.(success? 60: 120); }catch{} }

    // Camera state
    let currentDeviceId=null; let devices=[]; let scanning=false; let torchOn=false; let currentTrack=null; let rafId=null; let lastCodeAt=0; const cooldown=1200; let nativeDetector=null; let zxingReader=null;

    function preferBack(list){ const byLabel=list.find(d=>/back|rear|environment|خلف/i.test(d.label||'')); return byLabel? byLabel.deviceId : (list[0]? list[0].deviceId : null); }

    async function ensurePermission(){ try{ const tmp=await navigator.mediaDevices.getUserMedia({video:{facingMode:{ideal:'environment'}},audio:false}); tmp.getTracks().forEach(t=>t.stop()); }catch{} }

    async function listCameras(){ const all=await navigator.mediaDevices.enumerateDevices(); devices=all.filter(d=>d.kind==='videoinput'); const sel=$('#cameraSelect'); sel.innerHTML=''; devices.forEach((d,i)=>{ const o=document.createElement('option'); o.value=d.deviceId; o.textContent=d.label || `Camera ${i+1}`; sel.appendChild(o); }); if(devices.length){ if(!currentDeviceId){ currentDeviceId= preferBack(devices); } sel.value=currentDeviceId; } }

    async function switchCamera(){ if(!devices.length) return; const idx=devices.findIndex(d=>d.deviceId===currentDeviceId); const next=devices[(idx+1)%devices.length]; currentDeviceId=next.deviceId; $('#cameraSelect').value=currentDeviceId; if(scanning){ await stopScanner(); await startScanner(); } }

    async function toggleTorch(){ try{ if(!currentTrack) return toast('No torch'); const caps=currentTrack.getCapabilities?.(); if(!caps?.torch){ return toast('Torch not supported'); } torchOn=!torchOn; await currentTrack.applyConstraints({ advanced:[{torch: torchOn}]}); toast(torchOn? 'Torch ON':'Torch OFF'); }catch(e){ toast('Torch error'); } }

    function setStatus(text,color){ $('#statusText').textContent=text; $('#statusDot').style.background=color; }
    function showLast(code,msg,good){ $('#lastResult').textContent=code||'—'; $('#lastResult').style.color= good? '#86efac' : '#fca5a5'; $('#lastSub').textContent=msg||''; }

    async function startScanner(){ try{
      if(!checkHttps()) { toast(T[LANG].needHttps); return; }
      await ensurePermission(); await listCameras();
      const video=$('#video');
      scanning=true; $('#startBtn').disabled=true; $('#stopBtn').disabled=false; setStatus(T[LANG].ready,'#22c55e');
      const deviceId=$('#cameraSelect').value||currentDeviceId; currentDeviceId=deviceId;
      const constraints = deviceId ? { video: { deviceId: { exact: deviceId }, focusMode:'continuous' } } : { video: { facingMode: { ideal: 'environment' }, focusMode:'continuous' } };
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      video.srcObject = stream; await video.play().catch(()=>{});
      currentTrack = stream.getVideoTracks()[0] || null;

      const zxingOk = await window.ensureZXing();
      if(zxingOk && window.ZXing && window.ZXing.BrowserMultiFormatReader){
        zxingReader = new window.ZXing.BrowserMultiFormatReader();
        zxingReader.decodeFromVideoDevice(deviceId||null, video, (result)=>{
          if(result){ const now=Date.now(); if(now-lastCodeAt < cooldown) return; lastCodeAt=now; onCode(result.getText?.()||String(result.text||'').trim()); }
        });
      } else if ('BarcodeDetector' in window) {
        nativeDetector = new window.BarcodeDetector({ formats:['qr_code','code_128','code_39','ean_13','ean_8','upc_a','upc_e']});
        const canvas=document.createElement('canvas'); const ctx=canvas.getContext('2d');
        const loop=async()=>{ if(!scanning) return; try{ canvas.width=video.videoWidth||640; canvas.height=video.videoHeight||480; ctx.drawImage(video,0,0,canvas.width,canvas.height); const bitmap = await createImageBitmap(canvas); const codes = await nativeDetector.detect(bitmap); if(codes && codes.length){ const now=Date.now(); if(now-lastCodeAt >= cooldown){ lastCodeAt=now; onCode((codes[0].rawValue||codes[0].rawValue?.toString()||'').trim()); } } }catch{} rafId=requestAnimationFrame(loop); };
        rafId=requestAnimationFrame(loop);
      } else {
        toast(T[LANG].camlib); setStatus(T[LANG].camlib,'tomato');
      }
    }catch(e){ setStatus(e.message||'Error','tomato'); toast(T[LANG].camlib); }
    }

    async function stopScanner(){ try{ scanning=false; $('#startBtn').disabled=false; $('#stopBtn').disabled=true; if(zxingReader){ try{ await zxingReader.reset(); }catch{} zxingReader=null; } if(rafId){ cancelAnimationFrame(rafId); rafId=null; } const v=$('#video'); if(v && v.srcObject){ v.srcObject.getTracks().forEach(t=>t.stop()); v.srcObject=null; } }catch{} }

    async function onCode(raw){ const code=(raw||'').trim().toUpperCase(); if(!code) return; reflectEventTag(); const ev=getEvent(); if(!ev){ showLast(code, T[LANG].event+': ؟', false); toast(T[LANG].event); return; } showLast(code, T[LANG].checking, true);
      try{
        const ref=db.collection('invites').doc(code);
        const snap=await ref.get();
        if(!snap.exists){ showLast(code, T[LANG].notfound, false); feedback(false); pushHist({code, at:Date.now(), msg:T[LANG].notfound}); return; }
        const data=snap.data()||{};
        const docEvent = String(data.EventName||'');
        if(docEvent !== ev){ showLast(code, T[LANG].mismatch, false); feedback(false); pushHist({code, at:Date.now(), msg:T[LANG].mismatch+` (${docEvent||'—'} ≠ ${ev})`}); return; }
        if(String(data.Status||'').toLowerCase()==='yes'){
          showLast(code, T[LANG].dupe, false); feedback(false); pushHist({code, at:Date.now(), msg:T[LANG].dupe}); return;
        }
        await ref.set({ Status:'yes', scannedAt: Field.serverTimestamp() }, { merge:true });
        showLast(code, T[LANG].ok, true); feedback(true); pushHist({code, at:Date.Now?Date.Now():Date.now(), msg:T[LANG].ok}); toast(T[LANG].scanPaused);
      }catch(e){ showLast(code, e.message||'خطأ', false); feedback(false); pushHist({code, at:Date.now(), msg:e.message||'error'}); }
    }

    async function handleManual(){ const v=$('#manualCode').value; if(!v) return; await onCode(v); $('#manualCode').value=''; }

    function wire(){
      setLang(LANG); checkHttps(); setEventFromQuery(); reflectEventTag(); renderHist();
      $('#langBtn').addEventListener('click',()=>{ setLang(LANG==='ar'?'en':'ar'); reflectEventTag(); renderHist(); });
      $('#startBtn').addEventListener('click', startScanner);
      $('#stopBtn').addEventListener('click', stopScanner);
      $('#switchBtn').addEventListener('click', switchCamera);
      $('#torchBtn').addEventListener('click', toggleTorch);
      $('#cameraSelect').addEventListener('change', async(e)=>{ currentDeviceId=e.target.value; if(scanning){ await stopScanner(); await startScanner(); } });
      $('#manualBtn').addEventListener('click', handleManual);
      $('#manualCode').addEventListener('keydown', (e)=>{ if(e.key==='Enter'){ e.preventDefault(); handleManual(); }});
      $('#eventName').addEventListener('input', ()=>{ reflectEventTag(); renderHist(); });
      $('#clearHist').addEventListener('click', ()=>{ localStorage.removeItem(histKey()); renderHist(); });
    }

    if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', wire); else wire();
  })();
  </script>
</body>
</html>
